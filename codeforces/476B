#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<deque>
#include<numeric>
#include<iomanip>

#define ull unsigned long long
#define ll long long
#define NUM 998244353
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}
 
int binarysearch(vector<int> v, int find,int l, int r)
{
    if(find<v[l] or find > v[r]) 
    {
        return -1;
    }
    while(l<=r)
    {
        int mid  = l + (r-l)/2 ;
        if(v[mid] == find) return mid;
        if(v[mid]  > find) r = mid -1;
        else l =mid +1;
    }
    return -1;
}
int fact(int x)
{
    if(x<=1) return 1;
    int start =1;
    int ans =1;
    while(start<=x)
    {
        ans = ans*start;
        start++;
    }
    return ans;
}
bool isvalid(ll i , ll j ,ll n,ll m)
{
    if(i<0 or i> n-1 or j<0 or j> m-1)
    {
        return false;
    }
    return true;
}
void dfs(vector<vector<int> > &adj, vector<bool> &check, int i)
{
    if(check[i]) return;
    check[i] = true;
    for(auto j : adj[i])
    {
        if(!check[j]) dfs(adj,check,j) ;
    }
    return;
}
void solve()
{
    //setprecision(9);
    string send;
    string rec;
    cin>>send;
    cin>>rec;
    int count =0;
    for(int i=0;i<send.length();i++)
    {
        if(send[i] =='+') count++;
        else if(send[i] == '-') count--;
    }
    int check =0;
    int ques =0;
    for(int i=0;i<rec.length();i++)
    {
        if(rec[i] =='+') check++;
        else if(rec[i] == '-') check--;
        else ques++;
    }
    //cout<<ques<<" "<<check<<endl;
    double ans =0.0;
    if(check ==count and ques ==0)
    {
        cout<<1.0<<endl;
        return;
    }
    if(abs(check-count) > ques)
    {
        cout<<0.0<<endl;
        return;
    }
    int req = abs(count-check);
    //cout<<req<<" "<<count<<endl;
    float tot = pow(2,ques);
    if((ques+req)%2 != 0)
    {
        cout<<0.0<<endl;
        return;
    }
    else
    {
        int pos = (ques + req)/2 ;
        int ans  = fact(ques)/fact(pos) ;
        ans  = ans/fact(ques-pos) ;
        //cout<<tot<<endl;
        //cout<<ans<<endl;
        cout<<setprecision(10)<<ans/tot<<endl;
        return;
    }
    return;


}



    

int main()
{
    

    int t ;
    //cin>>t;
    t=1;
    while(t--)
    {
    
        solve();
    }
    return 0;
    
}
