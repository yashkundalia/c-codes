#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<deque>
#include<numeric>


#define ull unsigned long long
#define ll long long
#define NUM 1000000007
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}
 
int binarysearch(vector<int> v, int find,int l, int r)
{
    if(find<v[l] or find > v[r]) 
    {
        return -1;
    }
    while(l<=r)
    {
        int mid  = l + (r-l)/2 ;
        if(v[mid] == find) return mid;
        if(v[mid]  > find) r = mid -1;
        else l =mid +1;
    }
    return -1;
}

/*void solve()
{
    int n,m;
    cin>>n>>m;
    if(m%2 == 0) 
    {
        cout<<0<<endl;
        return;
    }
    vector<int> unhappy(n+1,0);
    for(int i=1;i<=n;i++)
    {
        int temp;
        cin>>temp;
        unhappy[i] = temp;
    }
    int ans =INT_MAX;
    vector<pair<int,int> > friends;
    vector<int> count(n+1,0);
    for(int i=0;i<m;i++)
    {
        int p1,p2;
        cin>>p1>>p2;
        friends.push_back(make_pair(p1,p2));
        count[p1]++;
        count[p2]++;
    }
    for(int i=0;i<m;i++)
    {
        cout<<friends[i].first<<" here"<<friends[i].second<<endl;
    }
        /*if(count[p1] % 2 == 0 and count[p2] % 2 == 0) 
        {
            ans = min(ans,unhappy[p1] + unhappy[p2]);
        }
        //cout<<count[p1]<<count[p2]<<endl;
    }
    /*for(int i=0;i<=n;i++)
    {
        cout<<count[i]<<" ";
    }
    cout<<endl;*/
    //int ans =INT_MAX;
/*
    for(int i=0;i<m;i++)
    {
        
        if(count[friends[i].first] % 2 == 0 and count[friends[i].second] % 2 == 0)
        {
            ans = min(ans, unhappy[friends[i].first] + unhappy[friends[i].second]) ; 
        }
    }
    for(int i=1;i<=n;i++)
    {
        if(count[i]%2 == 1)
        {
            ans = min(ans,unhappy[i]);
        }
    }
    cout<<ans<<endl;
    return;
}*/

/*
int main()
{
    
    
    int t ;
    cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
    
}*/
#define MAXN 100010
int x[MAXN],y[MAXN],a[MAXN],degree[MAXN];
int n,m;
void work()
{
    cin>>n>>m;
    for (int i=1;i<=n;i++)
    {
        degree[i]=0;
        cin>>a[i];
    }
    for (int i=1;i<=m;i++)
    {
        cin>>x[i]>>y[i];
        degree[x[i]]++;
        degree[y[i]]++;
    }
    int ans=INT_MAX;
    if (m%2==0)
        ans=0;
    for (int i=1;i<=n;i++)
        if (degree[i]%2==1)
            ans=min(ans,a[i]);
    for (int i=1;i<=m;i++)
        if (degree[x[i]]%2==0 && degree[y[i]]%2==0)
            ans=min(ans,a[x[i]]+a[y[i]]);
    cout<<ans<<endl;
}

int main()
{
    int casenum=1;
    cin>>casenum;
    for (int testcase=1;testcase<=casenum;testcase++)
        work();
    return 0;
}

