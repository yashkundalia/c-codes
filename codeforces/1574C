#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<numeric>

#define ull unsigned long long
#define ll long long
//#define NUM 1000000001
//ull mod  = 998244353;
using namespace std;

int prime(ll num)
{
    if(num <=1) return 0;
    for(ll i=2;i*i<=num;i++)
    {
        if(num % i == 0 ) return 0;
    }
    return 1;
}
ll binarysearch(ll num, vector<ll> v)
{
    ll l =0;
    ll r = v.size() -1;
    if(v[r] < num) return -1;
    if(v[l] >= num) return 0;
    ll ans ;
    while(l<=r)
    {
        ll mid = l + (r-l)/2 ;
        if(v[mid] == num) return mid;
        if(v[mid] < num)
        {
            l = mid + 1;
        }
        else
        {
            r = mid -1;
            ans = mid;
        }
    }
    return ans;
}


ll binarysearch_l(ll num, vector<ll> v)
{
    ll l =0;
    ll r = v.size() -1;
    if(v[r] < num) return -1;
    if(v[l] >= num) return 0;
    ll ans ;
    while(l<=r)
    {
        ll mid = l + (r-l)/2 ;
        if(v[mid] == num) return mid;
        if(v[mid] < num)
        {
            l = mid + 1;
            ans = mid;
        }
        else
        {
            r = mid -1;
            //ans = mid;
        }
    }
    return ans;
}
using li = long long;
int main()
{
    int n;
    cin >> n;
    vector<li> a(n);
    for (auto &x : a) cin >> x;
    sort(a.begin(), a.end());
    li sum = accumulate(a.begin(), a.end(), 0LL);
    int m;
    cin >> m;
    while (m--) {
        li x, y;
        cin >> x >> y;
        int i = lower_bound(a.begin(), a.end(), x) - a.begin();
        li ans = 2e18;
        if (i > 0) ans = min(ans, (x - a[i - 1]) + max(0LL, y - sum + a[i - 1]));
        if (i < n) ans = min(ans, max(0LL, y - sum + a[i]));
        cout << ans << '\n';
    }
    return 0;
}
