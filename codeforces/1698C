#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<deque>
#include<numeric>


#define ull unsigned long long
#define ll long long
#define NUM 1000000007
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}
 
int binarysearch(vector<int> v, int find,int l, int r)
{
    if(find<v[l] or find > v[r]) 
    {
        return -1;
    }
    while(l<=r)
    {
        int mid  = l + (r-l)/2 ;
        if(v[mid] == find) return mid;
        if(v[mid]  > find) r = mid -1;
        else l =mid +1;
    }
    return -1;
}

void solve()
{
    int n;
    cin>>n;
    vector<int> v;
    int zeros =0;
    map<int,int> mp;
    for(int i=0;i<n;i++)
    {
        int temp;
        cin>>temp;
        mp[temp]++;
        if(temp ==0) 
        {
            zeros++;
            continue;
        }
        v.push_back(temp);
        
    }
    sort(v.begin(),v.end());
    if(zeros == n)
    {
        cout<<"YES"<<endl;
    }
    if(v.size()>=5)
    {
        cout<<"NO"<<endl;
    }
    if(zeros>=0)
    {
        if(v.size() == 1 and zeros >=2)
        {
            cout<<"YES"<<endl;
            return;
        }
        if(v.size() == 2 and zeros >=1)
        {
            int a = v[0] +  v[1];
            if(mp.find(a) != mp.end())
            {
                cout<<"YES"<<endl;
                return;
            }
            cout<<"NO"<<endl;
            return;
        }
        if(v.size() == 3)
        {
            int a = v[0] + v[1] + v[2] ;
            if(mp.find(a) == mp.end())
            {
                cout<<"NO"<<endl;
                return;
            }
            if(zeros>=1)
            {
                int a1 = v[0] + v[1];
                int a2 = v[0] + v[2];
                int a3 = v[1] + v[2];
                if(mp.find(a1) != mp.end() and mp.find(a2)!=mp.end() and mp.find(a3)!=mp.end())
                {
                    cout<<"YES"<<endl;
                    return;
                }
                cout<<"NO"<<endl;
                return;
            }
            cout<<"YES"<<endl;
            return;
        }
        if(v.size() == 4)
        {
            for(int i=0;i<n-2;i++)
            {
                for(int j=i+1;j<n-1;j++)
                {
                    if(zeros>=1)
                    {
                        int a = v[i] + v[j];
                        if(mp.find(a) == mp.end())
                        {
                            cout<<"NO"<<endl;
                            return;
                        }
                    }
                    for(int k = j+1;k<n;k++)
                    {
                        int a = v[i] + v[j] + v[k] ;
                        if(mp.find(a) == mp.end())
                        {
                            cout<<"NO"<<endl;
                            return;
                        }
                    }
                }
            }
            cout<<"YES"<<endl;
            return;
        }

    }
    /*int a = 0;

    cout<<"YES"<<endl;
    return;*/

}

int main()
{
    
    
    int t ;
    cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
    
}
