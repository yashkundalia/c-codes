#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<deque>
#include<numeric>


#define ull unsigned long long
#define ll long long
#define NUM 1000000007
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}
 
int binarysearch(vector<int> v, int find,int l, int r)
{
    if(find<v[l] or find > v[r]) 
    {
        return -1;
    }
    while(l<=r)
    {
        int mid  = l + (r-l)/2 ;
        if(v[mid] == find) return mid;
        if(v[mid]  > find) r = mid -1;
        else l =mid +1;
    }
    return -1;
}
bool isvalid(ll i , ll j ,ll n,ll m)
{
    if(i<0 or i> n-1 or j<0 or j> m-1)
    {
        return false;
    }
    return true;
}
void dfs(vector<vector<int> > &adj, vector<bool> &check, int i)
{
    if(check[i]) return;
    check[i] = true;
    for(auto j : adj[i])
    {
        if(!check[j]) dfs(adj,check,j) ;
    }
    return;
}
void solve()
{
    ll n,m;
    cin>>n>>m;
    ll sum = n*(n-1)/2;
    ll s = 0;
    ll i = 1;
    ll x = 1;
    while(s<m)
    {
        s = s+i;
        i++;
    }
    if(s-m>0)
    {
        i--;
        s = s-i;
    }
    
    else i--;
    //cout<<i<<" i"<<s<<"s"<<endl;
    string ans = "";
    for(int j=0;j<n-i-1;j++)
    {
        ans+="a";
    }
    ans+="b";
    for(int j=0;j<i-1;j++)
    {
        ans+="a";
    }
    ans+="b";
    if(m-s ==0)
    {
        m = m-i;
        swap(ans[n-i],ans[n-1]);
        cout<<ans<<endl;
        return;
    }
    else m = m-s;
    swap(ans[n-m],ans[n-1]);
    cout<<ans<<endl;
    return;
}

    

int main()
{
    
    
    int t ;
    cin>>t;
    //t=1;
    while(t--)
    {
    
        solve();
    }
    return 0;
    
}
