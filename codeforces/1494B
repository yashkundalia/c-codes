#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<numeric>


#define ull unsigned long long
#define ll long long
#define NUM 1000000007
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}



void solve()
{
    int n,U,R,D,L;
    cin>>n>>U>>R>>D>>L;
    for(int mask =0;mask<16;mask++)
    {
        int u=0,r=0,l=0,d=0;
        bool check = true;
        if(mask&1)
        {
            u++;
            l++;
        }
        if(mask&2)
        {
            u++;
            r++;
        }
        if(mask&8)
        {
            l++;
            d++;
        }
        if(mask&4)
        {
            r++;
            d++;
        }
        if(u>U or u + n -2 < U) check = false;
        if(d>D or d + n -2 < D) check = false;
        if(r>R or r + n -2 < R) check = false;
        if(l>L or l + n -2 < L) check = false;
        if(check)
        {
            cout<<"YES"<<endl;
            return;
        }


    }
    cout<<"NO"<<endl;
    return;

    
}



int main()
{
    
    /*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    /*vector<ll> fac(200005 ,0);
    fac[0] = 1ll;
    fac[1] =1ll;
    for(ll i=2;i<200005;i++)
    {
        fac[i] = ((fac[i-1]%NUM)*(i%NUM))%NUM;
    }*/
    //cout<<fac[199999]<<endl;
    int t ;
    cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
}

/*
5 1000000000
2 1
1 10
1 1
4 1000000000
3 3


999999997*/
