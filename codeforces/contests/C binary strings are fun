/*
A binary string† b of odd length m is good if bi is the median‡ of b[1,i]§ for all odd indices i (1≤i≤m).

For a binary string a of length k, a binary string b of length 2k−1 is an extension of a if b2i−1=ai for all i such that 1≤i≤k. For example, 1001011 and 1101001 are extensions of the string 1001. String x=1011011 is not an extension of string y=1001 because x3≠y2. Note that there are 2k−1 different extensions of a.

You are given a binary string s of length n. Find the sum of the number of good extensions over all prefixes of s. In other words, find ∑ni=1f(s[1,i]), where f(x) gives number of good extensions of string x. Since the answer can be quite large, you only need to find it modulo 998244353.

† A binary string is a string whose elements are either 0 or 1.

‡ For a binary string a of length 2m−1, the median of a is the (unique) element that occurs at least m times in a.

§ a[l,r] denotes the string of length r−l+1 which is formed by the concatenation of al,al+1,…,ar in that order.

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤104). The description of the test cases follows.

The first line of each test case contains a single integer n (1≤n≤2⋅105), where n is the length of the binary string s.

The second line of each test case contains the binary string s of length n.

It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.

Output
For each test case, print the answer modulo 998244353.
*/

6
1
1
1
0
2
11
3
010
9
101101111
37
1011011111011010000011011111111011111



//code 


#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>

#define ull unsigned long long
#define ll long long
//#define NUM 1000000001
ull mod  = 998244353;
using namespace std;

ull binpow(ull a,ull b ,ull mod)
{
    if(b==0)return 1;
    ull res =1;
    while(b > 0)
    {
        if(b%2)
        {
            res = ((res%mod)*(a%mod))%mod;
            b--;
        }
        else
        {
            a = ((a%mod)*(a%mod))%mod;
            b /=2;
        }
    }
    return res;
}




int main()
{
    ull t;
    cin>>t;
    while(t--)
    {
        ull n;
        cin>>n;
        string s;
        cin>>s;
        ull ans =0;
        ull spaces =0;
        ull ct1 =0;
        ull ct0 = 0;
        for(ull i=0;i<n;i++)
        {
            if(i>0) spaces++;
            if(s[i] == '1') ct1++;
            else ct0++;
            if(s[i] == '1' and ct1 < (i+1))
            {
                ull req = i +1-ct1;
                spaces -= req;
                ct1 = i+1;
            }
            else if(s[i] == '0' and ct0 < (i+1))
            {
                ull req = i +1-ct0;
                spaces -= req;
                ct0 = i+1;
            }
            ans  = (ans%mod + binpow(2,spaces, mod))%mod;
        }
        cout<<ans<<endl;
    }
    return 0;
}

//1 1000000000
