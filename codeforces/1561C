#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<numeric> 

#define ull unsigned long long
#define ll long long
//#define NUM 1000000001
//ull mod  = 998244353;
using namespace std;

int prime(ll num)
{
    if(num <=1) return 0;
    for(ll i=2;i*i<=num;i++)
    {
        if(num % i == 0 ) return 0;
    }
    return 1;
}
ll binarysearch(ll num, vector<ll> v)
{
    ll l =0;
    ll r = v.size() -1;
    if(v[r] < num) return -1;
    if(v[l] >= num) return 0;
    ll ans ;
    while(l<=r)
    {
        ll mid = l + (r-l)/2 ;
        if(v[mid] == num) return mid;
        if(v[mid] < num)
        {
            l = mid + 1;
        }
        else
        {
            r = mid -1;
            ans = mid;
        }
    }
    return ans;
}


ll binarysearch_l(ll num, vector<ll> v)
{
    ll l =0;
    ll r = v.size() -1;
    if(v[r] < num) return -1;
    if(v[l] >= num) return 0;
    ll ans ;
    while(l<=r)
    {
        ll mid = l + (r-l)/2 ;
        if(v[mid] == num) return mid;
        if(v[mid] < num)
        {
            l = mid + 1;
            ans = mid;
        }
        else
        {
            r = mid -1;
            //ans = mid;
        }
    }
    return ans;
}
bool myfun(pair<ll,ll> &f , pair<ll,ll> &s)
{
    return f.second >=s.first;
}
using li = long long;
int main()
{
    ll t;
    cin>>t;
    while(t--)
    {
        ll n;
        cin>>n;
        vector< pair<ll ,ll > >  p;
        for(ll i=0;i<n;i++)
        {
            ll c;
            cin>>c;
            ll pow =0;
            for(ll i=0;i<c;i++)
            {
                ll temp;
                cin>>temp;
                pow = max(pow,temp + 1 -i);
            }
            p.push_back(make_pair(pow,c));

        }
        if(p.size() == 1) 
        {
            cout<<p[0].first<<endl;
            continue;
        }
        sort(p.begin(),p.end());
        ll sum = p[0].second;
        for(ll i = 1;i<p.size();i++)
        {
            p[i].second += p[i-1].second;

        }
        ll ans = p[0].first;
        for(ll i=1;i<p.size();i++)
        {
            ans = max(ans , p[i].first - p[i-1].second);
        }
        cout<<ans<<endl;
         
        //cout<<p[0].first<<endl;
    }
    return 0;
}
