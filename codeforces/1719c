#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>

#define ull unsigned long long
#define ll long long
//#define NUM 1000000001
//ull mod  = 998244353;
using namespace std;

ll binarysearch(ll num, vector<ll> v)
{
    ll l =0;
    ll r = v.size() -1;
    if(num <= v[0]) return 0;
    if(num > v[r]) return -1;
    ll ans =0;
    while(l<=r)
    {
        ll mid = l +(r-l)/2;
        //if(v[mid] == num) return mid;
        if(v[mid]<num)
        {
            l = mid + 1;

        }
        else
        {
            r = mid -1;
            ans =mid;
        }
    }
    /*for(ll i= ans+1 ;i<r;i++)
    {
        if(v[i] == num) ans++;
    }*/
    return ans;
}
int main()
{
    ll t;
    cin>>t;
    while(t--)
    {
        ll n,q;
        cin>>n>>q;
        vector<ll> v;
        for(ll i=0;i<n;i++)
        {
            ll temp ;
            cin>>temp;
            v.push_back(temp);
        }
        vector<pair<ll,ll> > queries;
        for(ll i=0;i<q;i++)
        {
            ll a,b;
            cin>>a>>b;
            queries.push_back(make_pair(a-1,b));

        }
        ll id =-1;
        ll m1 = -1;
        for(ll i=0;i<n;i++)
        {
            if(m1<v[i])
            {
                m1 =v[i];
                id =i;
            }
        }
        vector<ll> matches;
        ll winner = 0;
        unordered_map<ll,ll> m;
        for(ll i=1;i<=id - 1;i++)
        {
            if(v[i] > v[winner])
            {
                m[i]++;
                winner =i;

            }
            else
            {
                m[winner]++;
            }
        }
        for(ll i=0;i<q;i++)
        {
            if(queries[i].first == id)
            {
                cout<<max(0ll,queries[i].second - max(0ll,id - 1))<<endl;
            }
            else if(queries[i].first > id)
            {
                cout<<0<<endl;
            }
            else
            {
                if(max(0ll,queries[i].first - 1) > queries[i].second) cout<<0<<endl;
                else
                {
                    //if(m[queries[i].first] )
                    cout<<min(m[queries[i].first],queries[i].second - max(0ll,queries[i].first - 1))<<endl;
                }
            }
        }
        /*for(auto i:m)
        {
            cout<<i.second<<"matches"<<endl;
        }*/
        //cout<<m[queries[0].first]<<"matches"<<endl;
    }
    return 0;
}
