#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<deque>
#include<numeric>


#define ull unsigned long long
#define ll long long
#define NUM 1000000007
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}
 
int binarysearch(vector<int> v, int find,int l, int r)
{
    if(find<v[l] or find > v[r]) 
    {
        return -1;
    }
    while(l<=r)
    {
        int mid  = l + (r-l)/2 ;
        if(v[mid] == find) return mid;
        if(v[mid]  > find) r = mid -1;
        else l =mid +1;
    }
    return -1;
}
int palindromecheck(string s)
{
    if(s[0]== s[4] and s[1] == s[3])
    {
        return 1;
    }
    return 0;
}
/*int a[5] = {600, 60, 0, 10, 1};
int good[16] = {0, 70, 140, 210, 280, 350, 601, 671, 741, 811, 881, 951, 1202, 1272, 1342, 1412};

void solve() {
    string s;
    cin >> s;
    int x;
    cin >> x;
    int tot = 0;
    for (int i = 0; i < 5; i++) {
        tot += (int)(s[i] - '0') * a[i];
    }
    set<int> t;
    for (int i = 0; i < 2022; i++) {
        t.insert(tot);
        tot += x;
        tot %= 1440;
    }
    int res = 0;
    for (int i : t) {
        for (int j = 0; j < 16; j++) {
            if (good[j] == i) 
            {
                cout<<good[j]<<endl;
                res++;
            }
        }
    }
    cout << res << '\n';
}
*/
void solve()
{
    string s;
    cin>>s;
    int gap;
    cin>>gap;
    int h=0;
    int m =0;
    h = (s[0]-'0')*10 + (s[1] - '0') ;
    m = (s[3]-'0')*10 + (s[4] - '0') ;
    int h1 = gap/60;
    int m1 = gap%60;
    int iter = 1441;
    int ans =0;
    map<string,int> mp;
    while(iter>0)
    {
        if(h>23) h = h-24;
        string t1 = to_string(h) ;
        if(t1.size() == 1)
        {
            t1 = "0"+ t1;
        }
        string t2 = to_string(m) ;
        if(t2.size() == 1)
        {
            t2 = "0"+ t2;
        }
        string temp = t1 + ":" + t2 ;
        int x = palindromecheck(temp);
        if(x == 1)
        {
            if(mp.find(temp) == mp.end())
            {
                ans++;
                mp[temp]++;
            }
        }
        //cout<<temp<<endl;
        /*if(palindromecheck(temp))
        {
            cout<<temp<<endl;
        }*/
        m = m + m1;
        h = h + h1 + m/60;
        m = m%60;
        
        iter--;
    }
    cout<<ans<<endl;
    return;
}
/*
00:00
01:10
02:20
03:30
04:40
05:50
10:01
11:11
12:21
13:31
14:41
15:51
20:02
21:12
22:22
23:32
*/
int main()
{
    
    
    int t ;
    cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
    
}
/*
22:30
22:57
23:24
23:51
00:18
00:45
01:12
01:39
02:06
02:33
03:00
03:27
03:54
04:21
04:48
05:15
05:42
06:09
06:36
07:03
07:30
07:57
08:24
08:51
09:18
09:45
10:12
10:39
11:06
11:33
12:00
12:27
12:54
13:21
13:48
14:15
14:42
15:09
15:36
16:03
16:30
16:57
17:24
17:51
18:18
18:45
19:12
19:39
20:06
20:33
21:00
21:27
21:54
22:21
*/
