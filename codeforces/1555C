#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>
#include<set>
#include<cmath>
#include<deque>
#include<numeric>


#define ull unsigned long long
#define ll long long
#define NUM 1000000007
//ll mod  = 1000000007;
using namespace std;



ll binpow(ll x, ll y)
{
    ll res = 1ll; // Initialize result
  
    while (y > 0ll) {
        // If y is odd, multiply x with result
        if (y & 1ll)
            res = ((res%NUM) * (x%NUM))%NUM;
  
        // y must be even now
        y = y >> 1; // y = y/2
        x = ((x%NUM) * (x%NUM))%NUM; // Change x to x^2
    }
    return res%NUM;
}

bool sortbysec(pair<ll,ll> &a , pair<ll,ll> &b)
{
    if(a.first == b.first)
    {
        return (a.second <= b.second);
    }
    return (a.first < b.first) ;
}
 
int binarysearch(vector<int> v, int find,int l, int r)
{
    if(find<v[l] or find > v[r]) 
    {
        return -1;
    }
    while(l<=r)
    {
        int mid  = l + (r-l)/2 ;
        if(v[mid] == find) return mid;
        if(v[mid]  > find) r = mid -1;
        else l =mid +1;
    }
    return -1;
}
bool isvalid(ll i , ll j ,ll n,ll m)
{
    if(i<0 or i> n-1 or j<0 or j> m-1)
    {
        return false;
    }
    return true;
}
void solve()
{
    ll m;
    cin>>m;
    vector<vector<ll> > v(2);
    for(ll i=0;i<2;i++)
    {
        for(ll j=0;j<m;j++)
        {
            ll temp;
            cin>>temp;
            v[i].push_back(temp);
        }
    }
    vector<vector<ll> > prefix(2,vector<ll> (m,0));
    prefix[0][0] = v[0][0];
    prefix[1][0] = v[1][0];
    for(int i=1;i<m;i++)
    {
        prefix[0][i] = prefix[0][i-1] + v[0][i] ;
        prefix[1][i] = prefix[1][i-1] + v[1][i] ;
    }
    /*for(int i=0;i<m;i++)
    {
        cout<<prefix[0][i]<<" ";
    }
    cout<<endl;
    for(int i=0;i<m;i++)
    {
        cout<<prefix[1][i]<<" ";
    }
    cout<<endl;*/
    ll ans = prefix[0][m-1] - prefix[0][0];
    ll a_path = prefix[0][0] + prefix[1][m-1];
    for(ll i=1;i<m;i++)
    {
        ll temp1= max(prefix[1][i-1] , prefix[0][m-1] - prefix[0][i]) ;
        //cout<<temp1<<endl;
        ans = min(temp1,ans);
        /*ll temp = prefix[0][i] + prefix[1][m-1] - prefix[1][i-1];
        if(temp <= a_path)
        {
            a_path = temp;
            
        }*/
    }
    cout<<ans<<endl;
    return;
}


int main()
{
    

    int t ;
    cin>>t;
    //t=1;
    while(t--)
    {
        solve();
    }
    return 0;
    
}
