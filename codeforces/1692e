#include <iostream>
#include <map>
#include<unordered_map>
#include <iterator>
#include <vector>
#include <string>
#include <algorithm>
#include<utility>
#include<climits>
#include<stack>

#define ull unsigned long long
#define ll long long
//#define NUM 1000000001
//ull mod  = 998244353;
using namespace std;

ll binarysearch(ll num, vector<ll> v)
{
    ll l =0;
    ll r = v.size() -1;
    if(num <= v[0]) return  -1;
    //if(num > v[r]) return -1;
    ll ans = -1;
    while(l<=r)
    {
        ll mid = l +(r-l)/2;
        //if(v[mid] == num) return mid;
        if(v[mid]<num)
        {
            l = mid + 1;
            ans =mid;

        }
        else
        {
            r = mid -1;
            //ans =mid;
        }
    }
    /*for(ll i= ans+1 ;i<r;i++)
    {
        if(v[i] == num) ans++;
    }*/
    return ans;
}
int check(int t, vector<int> cnt )
{
    ll free =0,need =0;
    for(int i=1;i<cnt.size();i++)
    {
        if(t >= cnt[i])
        {
            free += (ll) (t-cnt[i])/2;
        }
        else
        {
            need += (ll) cnt[i] - t;
        }
    }
    if(free >= need) return 1;
    return 0;
}
int count(string s, char c)
{
    int ans =0;
    for(int i=0;i<s.length();i++)
    {
        if(s[i] == c) ans++;
    }
    return ans;
}
int main()
{
    ll t;
    cin>>t;
    while(t--)
    {
        int n,s;
        cin>>n>>s;
        vector<int> v;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            int temp;
            cin>>temp;
            //sum+=temp;
            v.push_back(temp);
        }
        int ans  = n+1;
        for(int i=0,j=0;i<n;i++)
        {
            while(j < n and sum + v[j] <=s )
            {
                sum+=v[j];
                j++;
            }
            if(sum == s) ans = min(ans , n-(j-i));
            sum-=v[i];
        }
        if(ans > n) ans = -1;
        cout<<ans<<endl;


    }
    return 0;
}
